#!/bin/bash
## prep-get.sh
## Developer: Espartaco Palma (esparta@gmail.com)
## Date: 2012-07-04
## LastMod: 2012-07-09
## License: GPL
## Description: This script try to download and the databases
##    of the Programa de Resultados Electorales Preliminares
##    generated by the Instituto Federal Electoral (IFE).
##    Optional: Create directory
##              Prefered downloading server
##
## Create a new directory for the database files?
## Set to 1 if to create a directory with the same name of the FILE
CREATEDIR=0

## This is MY prefered downloading server
## if you desire to download ramdomized, leave it blank
PREFERED_SERVER="http://prep2012.ife.org.mx"
##PREFERED_SERVER=""

FILE="20120702_2000-listaActas.tar.gz"

## cheksum valido
SHA1VALIDO="0b214a3571491b7053cdd9e1ade54ca10a5af086"

SERVERS=(
"http://prep2012.excelsior.com.mx"
"http://ife.canal22.org.mx"
"http://prep2012.elimparcial.com"
"http://prep2012.excelsior.com.mx"
"http://elecciones2012.gruporeforma.com"
"http://prep2012.radiorama.com.mx"
"http://prep2012.excelsior.com.mx"
"http://prep2012.ife.org.mx"
"http://prep.milenio.com"
"http://prep2012.aztecanoticias.com.mx"
"http://www.difusorife.ipn.mx"
"http://www.difusorprep-elecciones2012.unam.mx"
"http://prep2012.radioformula.com.mx"
"http://prep2012.excelsior.com.mx"
"http://prep.eluniversal.com.mx"
"http://elecciones.unotv.com"
"http://74.200.195.178"
)


function error_exit {

   local err=$?
   echo "error# $err on line $BASH_LINENO: $BASH_COMMAND"
   exit $err
}

## Working directory
## Thanks to stackoverflow
## http://stackoverflow.com/a/246128

SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
while [ -h "$SOURCE" ]
do
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

## Working directory

echo "Script de automatizacion en de descarga PREP 2012"


if [ ! -f "$DIR/$FILE" ]; then
  echo "Descargar archivo de alguno de los difusores"
  if [ -z "$PREFERED_SERVER" ]; then
    ## Get the file from some random server
    RANGE=${#SERVERS[@]}
    number=$RANDOM
    let "number %= $RANGE"
    dbsource=$(echo ${SERVERS[$number]})
  else
    dbsource="$PREFERED_SERVER";
  fi
  echo "Obteniendo BBDD de $dbsource"
  
  
    ## Checking if wget is installed
  if ! command -v wget >/dev/null 2>&1 ; then
    echo "wget no está instalado, intentando con cURL"    
    ## Checking if curl is installed 
    if ! command -v curl >/dev/null 2>&1 ; then
      echo >&2 "no está disponible ni wget, ni cURL. ¿Lo pido por correo?"
      exit 1
    else
       ## We have curl, trying
       if ! curl -O "$dbsource/prep/$FILE" ; then
          echo >&2 "Error al descargar el archivo con curl"
          exit 1
       fi
    fi
  else
     ## We have wget, trying
     if ! wget "$dbsource/prep/$FILE" ; then
         echo >&2 "Error al descargar el archivo con wget"
         exit 1
     fi
  fi
else
  echo "Existe ya un archivo de base de datos. Intentando con dicho archivo..."
fi ## Exist the database file?


trap error_exit ERR 

sum=
for x in sha1sum shasum sha1 ; do
  if type "${x%% *}" >/dev/null 2>/dev/null; then sum=$x; break; fi
done
if [ -z "$sum" ]; then 
  echo >&2 "No se encuentra comando de validación SHA1. Abortando."; exit 2; 
else
  echo "Validando archivo"
  ## Validate SHA1 Checksum, MUST be the same.
  sha1=`$sum "$FILE" | awk '{print $1}'`      
  if [ "$sha1" = "$SHA1VALIDO" ];then
    #The SHA1 is valid, continue
    echo "Descomprimir y desempacar archivo"
    if [ $CREATEDIR = 1  ]; then
      WDIR=$(echo $DIR/${FILE%.tar.gz})
      mkdir -p $WDIR
    else
      WDIR=$DIR
    fi
    tar xvfz $FILE -C $WDIR
  else
    echo "El checksum de el archivo de BBDD no coincide con el esperado"
    echo "Probablemente el archvo descargado esta corrupto"
    echo "por favor, borrelo y reinicie este proceso"
    exit 1
  fi  
fi
